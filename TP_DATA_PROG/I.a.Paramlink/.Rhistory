#       = P(Z > t_crit - mean_t)
# where Z ~ N(0,1)
power <- 1 - pnorm(t_crit - mean_t)
return(power)
}
power_values_d3 <- sapply(n1_values, function(n1) {
n2 <- total_n - n1
compute_power_nonN(n1, n2, delta = 3, alpha = 0.05)
})
plot(n1_values, power_values_d3, type = "b", pch = 19, xlab = "n1", ylab = "Power", main = "Power to detect the difference in 2")
plot(n1_values, power_values_d3, type = "b", pch = 19, xlab = "n1", ylab = "Power", main = "Power to detect the difference in 3")
e
n1_values_nonN <- 3:98
power_values_d3 <- sapply(n1_values_nonN, function(n1) {
n2 <- total_n - n1
compute_power_nonN(n1, n2, delta = 3, alpha = 0.05)
})
plot(n1_values_nonN, power_values_d3, type = "b", pch = 19, xlab = "n1", ylab = "Power", main = "Power to detect the difference in 3")
total_n2 <- 101
n1_values_nonN <- 3:98
power_values_d3 <- sapply(n1_values_nonN, function(n1) {
n2 <- total_n2 - n1
compute_power_nonN(n1, n2, delta = 3, alpha = 0.05)
})
plot(n1_values_nonN, power_values_d3, type = "b", pch = 19, xlab = "n1", ylab = "Power", main = "Power to detect the difference in 3")
total_n2 <- 91
n1_values_nonN <- 3:88
power_values_d3 <- sapply(n1_values_nonN, function(n1) {
n2 <- total_n2 - n1
compute_power_nonN(n1, n2, delta = 3, alpha = 0.05)
})
plot(n1_values_nonN, power_values_d3, type = "b", pch = 19, xlab = "n1", ylab = "Power", main = "Power to detect the difference in 3")
n1_candidates <- 1:24
powers <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers[i] <- compute_power_nonN(n1, n2, delta = 3, alpha)
} else{
powers[i] <- NA
}
}
plot(n1_candidates, powers, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power",
main="Power to detect difference of 3 with given budget")
compute_power_nonN <- function(n1, n2, delta, alpha = 0.05) {
# Given variance = 1
se <- sqrt(1/n1 + 1/n2)
df <- n1 + n2 - 2
# Critical value for two-sided test
t_crit <- qt(1 - alpha/2, df = df)
# Non-centrality parameter: difference over standard error
lambda <- delta / se
# Under H1, T ~ non-central t(df, ncp=lambda)
# Power = P(T < -t_crit) + P(T > t_crit)
# Using the non-central t CDF (pt):
p_lower <- pt(-t_crit, df = df, ncp = lambda)
p_upper <- 1 - pt(t_crit, df = df, ncp = lambda)
power <- p_lower + p_upper
return(power)
}
n1_candidates <- 1:24
powers <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers[i] <- compute_power_nonN(n1, n2, delta = 3, alpha)
} else{
powers[i] <- NA
}
}
plot(n1_candidates, powers, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power",
main="Power to detect difference of 3 with given budget")
n1_candidates <- 1:24
powers <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers[i] <- compute_power_nonN(n1, n2, delta = 2, alpha)
} else{
powers[i] <- NA
}
}
plot(n1_candidates, powers, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power",
main="Power to detect difference of 3 with given budget")
powers == max(powers)
n1_candidates <- 3:24
powers <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers[i] <- compute_power_nonN(n1, n2, delta = 2, alpha)
} else{
powers[i] <- NA
}
}
plot(n1_candidates, powers, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power",
main="Power to detect difference of 3 with given budget")
powers == max(powers)
n1_candidates <- 3:24
powers <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers[i] <- compute_power_nonN(n1, n2, delta = 3, alpha)
} else{
powers[i] <- NA
}
}
plot(n1_candidates, powers, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power",
main="Power to detect difference of 3 with given budget")
powers == max(powers)
?pt
print(powers)
compute_power_nonN_cor <- function(n1, n2, delta, v1_estim, v2_estim, alpha = 0.05) {
# Compute pooled variance
sp2 <- ((n1 - 1)*v1_estim + (n2 - 1)*v2_estim) / (n1 + n2 - 2)
# Standard error using the pooled variance
sCor <- sqrt((1/n1 + 1/n2)*sp2)
# Degrees of freedom
df <- n1 + n2 - 2
# Critical t-value for a two-sided test
t_crit <- qt(1 - alpha/2, df = df)
# Non-centrality parameter (delta / SE)
lambda <- delta / sCor
# Compute power using the non-central t-distribution:
# Power = P(T < -t_crit) + P(T > t_crit)
p_lower <- pt(-t_crit, df = df, ncp = lambda)
p_upper <- 1 - pt(t_crit, df = df, ncp = lambda)
power <- p_lower + p_upper
return(power)
}
compute_power_nonN_cor <- function(n1, n2, delta, v1_estim, v2_estim, alpha = 0.05) {
# Compute pooled variance
sp2 <- ((n1 - 1)*v1_estim + (n2 - 1)*v2_estim) / (n1 + n2 - 2)
# Standard error using the pooled variance
sCor <- sqrt((1/n1 + 1/n2)*sp2)
# Degrees of freedom
df <- n1 + n2 - 2
# Critical t-value for a two-sided test
t_crit <- qt(1 - alpha/2, df = df)
# Non-centrality parameter (delta / SE)
lambda <- delta / sCor
# Compute power using the non-central t-distribution:
# Power = P(T < -t_crit) + P(T > t_crit)
p_lower <- pt(-t_crit, df = df, ncp = lambda)
p_upper <- 1 - pt(t_crit, df = df, ncp = lambda)
power <- p_lower + p_upper
return(power)
}
powers_cor <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers_cor[i] <- compute_power_nonN_cor(n1, n2, delta = 3, alpha)
} else{
powers_cor[i] <- NA
}
}
plot(n1_candidates, powers_cor, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power_cor",
main="Corrected power to detect difference of 3 with given budget")
powers_cor == max(powers_cor)
compute_power_nonN_cor <- function(n1, n2, delta, v1_estim, v2_estim, alpha = 0.05) {
# Compute pooled variance
v1_estim = 1
v2_estim = 1
sp2 <- ((n1 - 1)*v1_estim + (n2 - 1)*v2_estim) / (n1 + n2 - 2)
# Standard error using the pooled variance
sCor <- sqrt((1/n1 + 1/n2)*sp2)
# Degrees of freedom
df <- n1 + n2 - 2
# Critical t-value for a two-sided test
t_crit <- qt(1 - alpha/2, df = df)
# Non-centrality parameter (delta / SE)
lambda <- delta / sCor
# Compute power using the non-central t-distribution:
# Power = P(T < -t_crit) + P(T > t_crit)
p_lower <- pt(-t_crit, df = df, ncp = lambda)
p_upper <- 1 - pt(t_crit, df = df, ncp = lambda)
power <- p_lower + p_upper
return(power)
}
powers_cor <- numeric(length(n1_candidates))
for (i in seq_along(n1_candidates)) {
n1 <- n1_candidates[i]
n2 <- 100 - 4*n1
if (n2 > 0) {
powers_cor[i] <- compute_power_nonN_cor(n1, n2, delta = 3, alpha)
} else{
powers_cor[i] <- NA
}
}
plot(n1_candidates, powers_cor, type="b", pch=19, xlab="n1 (Healthy)", ylab="Power_cor",
main="Corrected power to detect difference of 3 with given budget")
powers_cor == max(powers_cor)
print(powers_cor)
setwd('C:/Users/denis/OneDrive/Desktop/Uni/NGS/Project/TP_DATA_PROG/I.a.Paramlink')
library(paramlink)
fam = read.table('fam.txt')
x = linkdat(fam)
summary(x)
xdom = setModel(x, model=1, penetrances = c(0.00001, 1, 1), dfreq = 0.00001)
result_dom = lod(xdom, theta=c(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5))
result__dom_df = as.data.frame(result_dom)
write.csv(result__dom_df, "lod_results_dom.csv", row.names = TRUE)
result_dom = lod(xdom, theta=c(0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5))
result__dom_df = as.data.frame(result_dom)
write.csv(result__dom_df, "lod_results_dom2.csv", row.names = TRUE)
zmax_minus_11 <- 6.6738
theta_range <- seq(0.06, 0.08, by = 0.0001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom[, 1] > zmax_minus_11) {
print(paste("Theta at zmax - 1 is:", theta))
print(result_dom)
break
}
}
theta_range <- seq(0.04, 0.08, by = 0.0001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] > zmax_minus_11) {
print(paste("Theta at zmax - 1 is:", theta))
print(result_dom_ex)
break
}
}
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 > zmax_minus_11) {
print(paste("Theta at zmax - 1 is:", theta))
print(result_dom_ex)
break
}
}
theta_range <- seq(0.07, 0.084, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 > zmax_minus_11) {
print(paste("Theta at zmax - 1 is:", theta))
print(result_dom_ex)
break
}
}
zmax_minus_11 <- 6.6738
theta_range <- seq(0.07, 0.084, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 > zmax_minus_11) {
print(result_dom_ex)
break
}
}
result_dom_ex
xdom = setModel(x, model=1, penetrances = c(0.00001, 1, 1), dfreq = 0.00001)
zmax_minus_11 <- 6.6738
theta_range <- seq(0.07, 0.084, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 > zmax_minus_11) {
print(result_dom_ex)
break
}
}
result_dom_ex
zmax_minus_11 <- 6.6738
theta_range <- seq(0.07, 0.1, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 > zmax_minus_11) {
print(result_dom_ex)
break
}
}
result_dom_ex
setwd('C:/Users/denis/OneDrive/Desktop/Uni/NGS/Project/TP_DATA_PROG/I.a.Paramlink')
library(paramlink)
fam = read.table('fam.txt')
x = linkdat(fam)
xdom = setModel(x, model=1, penetrances = c(0.00001, 1, 1), dfreq = 0.00001)
zmax_minus_11 <- 6.6738
theta_range <- seq(0.07, 0.1, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 > zmax_minus_11) {
print(result_dom_ex)
break
}
}
zmax_minus_11 <- 6.6738
theta_range <- seq(0.07, 0.1, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] - 1 == zmax_minus_11) {
print(lod(xdom, theta = theta + 0.001))
break
}
}
result_dom_ex
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (result_dom_ex[, 1] == zmax_minus_11) {
print(lod(xdom, theta = theta + 0.001))
break
}
}
summary(result_dom_ex[ ,1])
x = result_dom_ex[ ,1]
x
typeof(x)
x = linkdat(fam)
xdom = setModel(x, model=1, penetrances = c(0.00001, 1, 1), dfreq = 0.00001)
zmax_minus_11 <- 6.6738
theta_range <- seq(0.07, 0.1, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (as.numeric(result_dom_ex[, 1]) == zmax_minus_11) {
print(lod(xdom, theta = theta + 0.001))
break
}
}
result_dom_ex
lod(xdom, theta = 0.07)
print(as.numeric(result_dom_ex[, 1]) == zmax_minus_11)
print(as.numeric(result_dom_ex[, 1]) > zmax_minus_11)
print(as.numeric(result_dom_ex[, 1]) > zmax_minus_11)
print(as.numeric(result_dom_ex[, 1]) < zmax_minus_11)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
print(result_dom_ex[ , 1])
# Check if the first column matches the zmax - 1 value
if (as.numeric(result_dom_ex[, 1]) == zmax_minus_11) {
print(lod(xdom, theta = theta + 0.001))
break
}
}
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
# Check if the first column matches the zmax - 1 value
if (as.numeric(result_dom_ex[, 1]) < zmax_minus_11) {
print(lod(xdom, theta = theta + 0.001))
break
}
}
theta_range <- seq(0.07, 0.09, by = 0.001)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
print(paste("Lod-score", result_dom_ex[,1], "theta = ", theta))
# Check if the first column matches the zmax - 1 value
if (as.numeric(result_dom_ex[, 1]) < zmax_minus_11) {
print(lod(xdom, theta = theta + 0.001))
break
}
}
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
print(paste("Lod-score", result_dom_ex[,1], "theta = ", theta))
# Check if the first column matches the zmax - 1 value
if (as.numeric(result_dom_ex[, 1]) < zmax_minus_11) {
print(lod(xdom, theta = theta - 0.001))
break
}
}
lod_max <- lod(xdom, theta = 0)
theta_range <- seq(0.06, 0.2, by = 0.001)
i_range <- seq(1, 10, by = 1)
for (theta in theta_range) {
# Compute the LOD score for the current theta
result_dom_ex <- lod(xdom, theta = theta)
for (i in i_range){
zmax_minus_11 <- result_dom_ex[,i] - 1
# Check if the first column matches the zmax - 1 value
if (as.numeric(result_dom_ex[, i]) < zmax_minus_11) {
print(lod(xdom, theta = theta - 0.001))
print(paste("Marker", i, "Lod-score:", lod(xdom, theta = theta - 0.001)[,1], "theta = ", theta))
break
}
}
}
lod_max <- lod(xdom, theta = 0)
theta_range <- seq(0.06, 0.2, by = 0.001)
i_range <- seq(1, 10, by = 1)
for (i in i_range) {
zmax_minus_11 <- lod_max[, i] - 1  # Calculate zmax - 1 for the marker
for (theta in theta_range) {
result_dom_ex <- lod(xdom, theta = theta)
# Check if the LOD score drops below zmax - 1
if (result_dom_ex[, i] < zmax_minus_11) {
previous_theta <- theta - 0.001  # Backtrack to the previous theta
previous_result <- lod(xdom, theta = previous_theta)
print(paste("Marker", i, "Lod-score:", previous_result[, i], "theta = ", previous_theta))
break # Stop searching for this marker once the condition is met
}
}
}
lod_max <- lod(xdom, theta = 0) # Get the maximum LOD scores at theta = 0
theta_range <- seq(0.06, 0.2, by = 0.001)
i_range <- seq(1, 10, by = 1)
# Initialize a data frame to store CI bounds
ci_bounds <- data.frame(Marker = integer(), Lower = numeric(), Upper = numeric())
# Loop for markers 1–10
for (i in i_range) {
zmax_minus_11 <- lod_max[, i] - 1  # Calculate zmax - 1 for the marker
if (lod_max[, i] < 3) {
# Inconclusive case: add NA for lower and upper bounds
ci_bounds <- rbind(ci_bounds, data.frame(Marker = i, Lower = NA, Upper = NA))
next
}
for (theta in theta_range) {
result_dom_ex <- lod(xdom, theta = theta)
# Check if the LOD score drops below zmax - 1
if (result_dom_ex[, i] < zmax_minus_11) {
previous_theta <- theta - 0.001  # Backtrack to the previous theta
ci_bounds <- rbind(ci_bounds, data.frame(Marker = i, Lower = 0, Upper = previous_theta))
break
}
}
}
# Additional loop for markers 11–13
i_range_2 <- seq(11, 13, by = 1)
for (i in i_range_2) {
zmax <- max(lod(xdom, theta_range)[, i])  # Find the maximum LOD score for this marker
if (zmax < 3) {
# Inconclusive case: add NA for lower and upper bounds
ci_bounds <- rbind(ci_bounds, data.frame(Marker = i, Lower = NA, Upper = NA))
next
}
# Find lower bound
lower_theta <- NA  # Initialize lower bound
for (theta in theta_range) {
result_dom_ex <- lod(xdom, theta = theta)
if (result_dom_ex[, i] > zmax - 1) {
lower_theta <- theta - 0.001
break
}
}
# Find upper bound
upper_theta <- NA  # Initialize upper bound
for (theta in rev(theta_range)) { # Search in reverse for the upper bound
result_dom_ex <- lod(xdom, theta = theta)
if (result_dom_ex[, i] > zmax - 1) {
upper_theta <- theta + 0.001
break
}
}
# Add both bounds to ci_bounds
ci_bounds <- rbind(ci_bounds, data.frame(Marker = i, Lower = lower_theta, Upper = upper_theta))
}
View(xdom)
# Additional loop for markers 11–13
i_range_2 <- seq(11, 13, by = 1)
for (i in i_range_2) {
zmax <- max(sapply(theta_range, function(theta) lod(xdom, theta = theta)[, i]))  # Find the maximum LOD score for this marker
if (zmax < 3) {
# Inconclusive case: add NA for lower and upper bounds
ci_bounds <- rbind(ci_bounds, data.frame(Marker = i, Lower = NA, Upper = NA))
next
}
# Find lower bound
lower_theta <- NA  # Initialize lower bound
for (theta in theta_range) {
result_dom_ex <- lod(xdom, theta = theta)
if (result_dom_ex[, i] > zmax - 1) {
lower_theta <- theta - 0.001
break
}
}
# Find upper bound
upper_theta <- NA  # Initialize upper bound
for (theta in rev(theta_range)) { # Search in reverse for the upper bound
result_dom_ex <- lod(xdom, theta = theta)
if (result_dom_ex[, i] > zmax - 1) {
upper_theta <- theta + 0.001
break
}
}
# Add both bounds to ci_bounds
ci_bounds <- rbind(ci_bounds, data.frame(Marker = i, Lower = lower_theta, Upper = upper_theta))
}
View(ci_bounds)
write.csv(ci_bounds, "ci_bounds.csv", row.names = TRUE)
